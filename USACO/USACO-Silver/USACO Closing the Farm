#include <iostream>
#include<vector>
#include<math.h>
#include<algorithm>
#include <fstream>
#include<string>
using namespace std;
using namespace std;
const int MAX_N = 3000;

vector<vector<int>> adj(MAX_N);
vector<int> vis(MAX_N);
vector<int> closed(MAX_N);
int nodes = 0;

void dfs(int node) {
	if (vis[node] || closed[node]) return;

	nodes++;
	vis[node] = true;

	for (int u : adj[node]) {
		if (!vis[u]) dfs(u);
	}
}
int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	ifstream fin("closing.in");
	ofstream fout("closing.out");
	int n, m;
	fin >> n >> m;

	for (int i = 0; i < m; i++) {
		int a, b;
		fin >> a >> b;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	vector<int> num(n);
	for (int i = 0; i < n; i++)
		fin >> num[i];
	dfs(1);
	if (nodes == n)
		fout << "YES" << "\n";
	else
		fout << "NO" << "\n";
	for (int i = 0; i < n-1; i++) {
		nodes = 0;
		closed[num[i]] = true;
		fill(vis.begin(), vis.end(), false);

		dfs(num[n - 1]);

		if (nodes == n - i - 1) {
			fout << "YES"
				<< "\n";
		}
		else {
			fout << "NO"
				<< "\n";
		}
	}
}
