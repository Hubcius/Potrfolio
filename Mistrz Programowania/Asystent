#include <iostream>
#include <string>
#include<vector>
using namespace std;

string multiplyStrings(string str1, string str2) {
    int len1 = str1.length();
    int len2 = str2.length();

    if (len1 == 0 || len2 == 0) {
        return "0";
    }

    vector<int> result(len1 + len2, 0);

    int i_n1 = 0;
    int i_n2 = 0;

    for (int i = len1 - 1; i >= 0; i--) {
        int carry = 0;
        int n1 = str1[i] - '0';

        i_n2 = 0;

        for (int j = len2 - 1; j >= 0; j--) {
            int n2 = str2[j] - '0';
            int sum = n1 * n2 + result[i_n1 + i_n2] + carry;
            carry = sum / 10;
            result[i_n1 + i_n2] = sum % 10;
            i_n2++;
        }

        if (carry > 0) {
            result[i_n1 + i_n2] += carry;
        }

        i_n1++;
    }

    int i = result.size() - 1;
    while (i >= 0 && result[i] == 0) {
        i--;
    }

    if (i == -1) {
        return "0";
    }

    string s = "";
    while (i >= 0) {
        s += to_string(result[i--]);
    }

    return s;
}
string longDivision(string number, int divisor)
{
    string ans;


    int idx = 0;
    int temp = number[idx] - '0';
    while (temp < divisor)
        temp = temp * 10 + (number[++idx] - '0');

    while (number.size() > idx) {
        ans += (temp / divisor) + '0';
        temp = (temp % divisor) * 10 + number[++idx] - '0';
    }

    if (ans.length() == 0)
        return "0";
    return ans;
}

const int MOD = 1000000007;

int main() {
    int n;
    cin >> n;
    long long int tab[100000];
    string product = "1";

    for (int i = 0; i < n; i++) {
        string s;
        cin >> s;
        tab[i] = stoi(s);
        product = multiplyStrings(product, s);
    }
    for (int i = 0; i < n; i++) {
        string result = longDivision(product, tab[i]);

        int rem = 0;
        for (int i = 0; i < result.length(); i++) {
            rem = (rem * 10 + (result[i] - '0')) % MOD;
        }

        cout << rem << " ";
    }

    return 0;
}
